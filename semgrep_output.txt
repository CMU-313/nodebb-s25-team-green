                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 164 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                           
  [36m[22m[24m  docker-compose-pgsql.yml[0m
    ‚ùØ‚ù± yaml.docker-compose.security.no-new-privileges.no-new-privileges
          Service 'postgres' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                           
          Details: https://sg.run/0n8q                                                                  
                                                                                                        
           16‚îÜ postgres:
   
    ‚ùØ‚ù± yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
          Service 'postgres' is running with a writable root filesystem. This may allow malicious applications
          to download and run additional payloads, or modify container files. If an application inside a      
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           16‚îÜ postgres:
   
    ‚ùØ‚ù± yaml.docker-compose.security.no-new-privileges.no-new-privileges
          Service 'redis' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                        
          Details: https://sg.run/0n8q                                                               
                                                                                                     
           26‚îÜ redis:
   
    ‚ùØ‚ù± yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
          Service 'redis' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a         
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           26‚îÜ redis:
                                           
  [36m[22m[24m  docker-compose-redis.yml[0m
    ‚ùØ‚ù± yaml.docker-compose.security.no-new-privileges.no-new-privileges
          Service 'redis' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                        
          Details: https://sg.run/0n8q                                                               
                                                                                                     
           16‚îÜ redis:
   
    ‚ùØ‚ù± yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
          Service 'redis' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a         
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           16‚îÜ redis:
                                     
  [36m[22m[24m  docker-compose.yml[0m
    ‚ùØ‚ù± yaml.docker-compose.security.no-new-privileges.no-new-privileges
          Service 'mongo' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                        
          Details: https://sg.run/0n8q                                                               
                                                                                                     
           17‚îÜ mongo:
   
    ‚ùØ‚ù± yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
          Service 'mongo' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a         
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           17‚îÜ mongo:
   
    ‚ùØ‚ù± yaml.docker-compose.security.no-new-privileges.no-new-privileges
          Service 'redis' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                        
          Details: https://sg.run/0n8q                                                               
                                                                                                     
           29‚îÜ redis:
   
    ‚ùØ‚ù± yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
          Service 'redis' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a         
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           29‚îÜ redis:
   
    ‚ùØ‚ù± yaml.docker-compose.security.no-new-privileges.no-new-privileges
          Service 'postgres' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                           
          Details: https://sg.run/0n8q                                                                  
                                                                                                        
           39‚îÜ postgres:
   
    ‚ùØ‚ù± yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
          Service 'postgres' is running with a writable root filesystem. This may allow malicious applications
          to download and run additional payloads, or modify container files. If an application inside a      
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           39‚îÜ postgres:
                                 
  [36m[22m[24m  install/web.js[0m
     ‚ù± javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
          A CSRF middleware was not detected in your express application. Ensure you are either using one such
          as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your    
          routes with a token or cookies.                                                                     
          Details: https://sg.run/BxzR                                                                        
                                                                                                              
           18‚îÜ const app = express();
   
   ‚ùØ‚ùØ‚ù± javascript.express.security.require-request.require-request
          If an attacker controls the x in require(x) then they can cause code to load that was not intended
          to run on the server.                                                                             
          Details: https://sg.run/jRbl                                                                      
                                                                                                            
          118‚îÜ db = require(`../src/database/${dbName}`);
   
   ‚ùØ‚ùØ‚ù± javascript.express.security.audit.remote-property-injection.remote-property-injection
          Bracket object notation with user input is present, this might allow an attacker to access all
          properties of the object and even it's prototype. Use literal values for object properties.   
          Details: https://sg.run/Z4gn                                                                  
                                                                                                        
          122‚îÜ opts[key.replace(`${dbName}:`, '')] = req.query[key];
                                                     
  [36m[22m[24m  public/src/admin/modules/search.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `term` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           17‚îÜ .replace(new RegExp('^(?:(?!' + escaped + ').)*$', 'gmi'), '')
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `params` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           19‚îÜ .replace(new RegExp('(^|\\n).*?' + title + '.*?(\\n|$)', 'g'), '')
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `term` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           23‚îÜ new RegExp('^[\\s\\S]*?(.{0,25})(' + escaped + ')(.{0,25})[\\s\\S]*?$', 'gmi'),
            ‚ãÆ‚îÜ----------------------------------------
           31‚îÜ new RegExp('(^.*?)(' + escaped + ')(.*?$)', 'gi'),
                                        
  [36m[22m[24m  public/src/ajaxify.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `val` function argument, this might allow an attacker to cause a Regular     
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          236‚îÜ return new RegExp(val);
                                               
  [36m[22m[24m  public/src/modules/search.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `searchQuery` function argument, this might allow an attacker to cause a     
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          298‚îÜ const regex = new RegExp('(' + regexStr + ')', 'gi');
                                                 
  [36m[22m[24m  public/src/modules/settings.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
          221‚îÜ value = value[part];
            ‚ãÆ‚îÜ----------------------------------------
          437‚îÜ parentCfg = parentCfg[part];
                                                          
  [36m[22m[24m  public/src/modules/translator.common.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `i` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          267‚îÜ out = out.replace(new RegExp('%' + (i + 1), 'g'), escaped);
   
    ‚ùØ‚ù± javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
          302‚îÜ x = x[keyParts[i]];
                                             
  [36m[22m[24m  public/src/utils.common.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `tags` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          302‚îÜ return String(str).replace(new RegExp('<(\\/)?(' + (pattern || '[^\\s>]+') +
               ')(\\s+[^<>]*?)?\\s*(\\/)?>', 'gi'), '');                                   
                                      
  [36m[22m[24m  src/admin/search.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           62‚îÜ const template = await fs.promises.readFile(path.resolve(nconf.get('views_dir'),
               `${namespace}.tpl`), 'utf8');                                                   
                                   
  [36m[22m[24m  src/api/users.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          681‚îÜ const stat = await fs.stat(path.join(__dirname, '../../build/export', filename));
                                   
  [36m[22m[24m  src/cli/index.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           31‚îÜ const { version } = JSON.parse(fs.readFileSync(path.join(paths.nodeModules, packageName,
               'package.json'), 'utf8'));                                                              
                                             
  [36m[22m[24m  src/cli/package-install.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          159‚îÜ const isLink = fs.lstatSync(path.join(paths.nodeModules, pkgName)).isSymbolicLink();
            ‚ãÆ‚îÜ----------------------------------------
          165‚îÜ const pkgConfig = JSON.parse(fs.readFileSync(path.join(paths.nodeModules, pkgName,
               'package.json'), 'utf8'));                                                        
                                   
  [36m[22m[24m  src/cli/reset.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           99‚îÜ await fs.promises.access(path.join(paths.nodeModules, themeId, 'package.json'));
                                             
  [36m[22m[24m  src/cli/upgrade-plugins.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           28‚îÜ path.join(paths.nodeModules, module, 'package.json'), { encoding: 'utf-8' }
            ‚ãÆ‚îÜ----------------------------------------
           60‚îÜ fs.accessSync(path.join(paths.nodeModules, pkgName, '.git'));
                                                      
  [36m[22m[24m  src/controllers/accounts/uploads.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           28‚îÜ url: path.resolve(nconf.get('upload_url'), uploadName),
                                                      
  [36m[22m[24m  src/controllers/admin/appearance.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.res-render-injection.res-render-injection
          User controllable data `req` enters `res.render(...)` this can lead to the loading of other         
          HTML/templating pages that they may not be authorized to render. An attacker may attempt to use     
          directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system.
          Where possible, do not allow users to define what should be  loaded in res.render or use an allow   
          list for the existing application.                                                                  
          Details: https://sg.run/eLjd                                                                        
                                                                                                              
            8‚îÜ res.render(`admin/appearance/${term}`, {});
                                                
  [36m[22m[24m  src/controllers/admin/info.js[0m
   ‚ùØ‚ùØ‚ù± javascript.lang.security.detect-child-process.detect-child-process
          Detected calls to child_process from a function argument `cmd`. This could lead to a command  
          injection if the input is user controllable. Try to avoid calls to child_process, and if it is
          needed ensure user input is correctly sanitized or sandboxed.                                 
          Details: https://sg.run/l2lo                                                                  
                                                                                                        
          131‚îÜ exec(cmd, (err, stdout) => {
                                                    
  [36m[22m[24m  src/controllers/admin/settings.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.res-render-injection.res-render-injection
          User controllable data `req` enters `res.render(...)` this can lead to the loading of other         
          HTML/templating pages that they may not be authorized to render. An attacker may attempt to use     
          directory traversal techniques e.g. `../folder/index` to access other HTML pages on the file system.
          Where possible, do not allow users to define what should be  loaded in res.render or use an allow   
          list for the existing application.                                                                  
          Details: https://sg.run/eLjd                                                                        
                                                                                                              
           34‚îÜ res.render(`admin/settings/${term}`, payload);
                                                  
  [36m[22m[24m  src/controllers/admin/themes.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14‚îÜ const themeDir = path.join(paths.nodeModules, req.params.theme);
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           14‚îÜ const themeDir = path.join(paths.nodeModules, req.params.theme);
   
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           15‚îÜ const themeConfigPath = path.join(themeDir, 'theme.json');
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           15‚îÜ const themeConfigPath = path.join(themeDir, 'theme.json');
   
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           28‚îÜ const screenshotPath = themeConfig.screenshot ? path.join(themeDir, themeConfig.screenshot)
               : defaultScreenshotPath;                                                                   
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           28‚îÜ const screenshotPath = themeConfig.screenshot ? path.join(themeDir, themeConfig.screenshot)
               : defaultScreenshotPath;                                                                   
   
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           28‚îÜ const screenshotPath = themeConfig.screenshot ? path.join(themeDir, themeConfig.screenshot)
               : defaultScreenshotPath;                                                                   
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           28‚îÜ const screenshotPath = themeConfig.screenshot ? path.join(themeDir, themeConfig.screenshot)
               : defaultScreenshotPath;                                                                   
   
    ‚ùØ‚ù± javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           30‚îÜ res.sendFile(exists ? screenshotPath : defaultScreenshotPath);
                                                   
  [36m[22m[24m  src/controllers/admin/uploads.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           19‚îÜ const currentFolder = path.join(nconf.get('upload_path'), req.query.dir || '');
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           19‚îÜ const currentFolder = path.join(nconf.get('upload_path'), req.query.dir || '');
            ‚ãÆ‚îÜ----------------------------------------
           72‚îÜ const dir = path.join(currentPath, part);
            ‚ãÆ‚îÜ----------------------------------------
           93‚îÜ const pathToFile = path.join(currentDir, file);
            ‚ãÆ‚îÜ----------------------------------------
           93‚îÜ const pathToFile = path.join(currentDir, file);
            ‚ãÆ‚îÜ----------------------------------------
          243‚îÜ const uploadPath = path.join(nconf.get('upload_path'), folder, 'site-logo-x50.png');
                                                 
  [36m[22m[24m  src/controllers/admin/users.js[0m
   ‚ùØ‚ùØ‚ù± javascript.express.security.audit.remote-property-injection.remote-property-injection
          Bracket object notation with user input is present, this might allow an attacker to access all
          properties of the object and even it's prototype. Use literal values for object properties.   
          Details: https://sg.run/Z4gn                                                                  
                                                                                                        
          255‚îÜ data[`sort_${data.sortBy}`] = true;
            ‚ãÆ‚îÜ----------------------------------------
          257‚îÜ data[`searchBy_${validator.escape(String(req.query.searchBy))}`] = true;
                                          
  [36m[22m[24m  src/controllers/home.js[0m
    ‚ùØ‚ù± javascript.express.security.express-data-exfiltration.express-data-exfiltration
          Depending on the context, user control data in `Object.assign` can cause web response to include
          data that it should not have or can lead to a mass assignment vulnerability.                    
          Details: https://sg.run/pkpL                                                                    
                                                                                                          
           47‚îÜ req.query = Object.assign(parsedUrl.query, req.query);
                                          
  [36m[22m[24m  src/controllers/mods.js[0m
   ‚ùØ‚ùØ‚ù± javascript.express.security.audit.remote-property-injection.remote-property-injection
          Bracket object notation with user input is present, this might allow an attacker to access all
          properties of the object and even it's prototype. Use literal values for object properties.   
          Details: https://sg.run/Z4gn                                                                  
                                                                                                        
           46‚îÜ memo[cur] = req.query[cur].trim();
            ‚ãÆ‚îÜ----------------------------------------
           48‚îÜ memo[cur] = req.query[cur];
   
    ‚ùØ‚ù± javascript.express.security.express-data-exfiltration.express-data-exfiltration
          Depending on the context, user control data in `Object.assign` can cause web response to include
          data that it should not have or can lead to a mass assignment vulnerability.                    
          Details: https://sg.run/pkpL                                                                    
                                                                                                          
          189‚îÜ res.render('flags/detail', Object.assign(results.flagData, {
          190‚îÜ    assignees: assignees,
          191‚îÜ    type_bool: ['post', 'user', 'empty'].reduce((memo, cur) => {
          192‚îÜ            if (cur !== 'empty') {
          193‚îÜ                    memo[cur] = results.flagData.type === cur && (
          194‚îÜ                            !results.flagData.target ||
          195‚îÜ                            !!Object.keys(results.flagData.target).length
          196‚îÜ                    );
          197‚îÜ            } else {
          198‚îÜ                    memo[cur] = !Object.keys(results.flagData.target).length;
             [hid 12 additional lines, adjust with --max-lines-per-finding] 
                                           
  [36m[22m[24m  src/controllers/users.js[0m
   ‚ùØ‚ùØ‚ù± javascript.express.security.audit.remote-property-injection.remote-property-injection
          Bracket object notation with user input is present, this might allow an attacker to access all
          properties of the object and even it's prototype. Use literal values for object properties.   
          Details: https://sg.run/Z4gn                                                                  
                                                                                                        
           41‚îÜ searchData[`section_${section}`] = true;
                                                 
  [36m[22m[24m  src/controllers/write/admin.js[0m
   ‚ùØ‚ùØ‚ù± javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
          If unverified user data can reach the `phantom` methods it can result in Server-Side Request Forgery
          vulnerabilities                                                                                     
          Details: https://sg.run/pxe0                                                                        
                                                                                                              
           36‚îÜ const token = await api.utils.tokens.generate({ uid, description });
                                                 
  [36m[22m[24m  src/controllers/write/users.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
          203‚îÜ res.sendFile(data.filename, {
                                             
  [36m[22m[24m  src/database/mongo/main.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `params` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           44‚îÜ '_key', { _key: { $regex: new RegExp(match) } }
                                               
  [36m[22m[24m  src/database/mongo/sorted.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `params` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          549‚îÜ regex = new RegExp(match);
                              
  [36m[22m[24m  src/file.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           23‚îÜ const uploadPath = path.join(nconf.get('upload_path'), folder, filename);
            ‚ãÆ‚îÜ----------------------------------------
           23‚îÜ const uploadPath = path.join(nconf.get('upload_path'), folder, filename);
            ‚ãÆ‚îÜ----------------------------------------
          152‚îÜ const res = path.resolve(dir, subdir);
            ‚ãÆ‚îÜ----------------------------------------
          152‚îÜ const res = path.resolve(dir, subdir);
                                      
  [36m[22m[24m  src/groups/cover.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           74‚îÜ const filePath = path.join(nconf.get('upload_path'), 'files', filename);
                                   
  [36m[22m[24m  src/languages.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           16‚îÜ const pathToLanguageFile = path.join(languagesPath, language, `${namespace}.json`);
            ‚ãÆ‚îÜ----------------------------------------
           16‚îÜ const pathToLanguageFile = path.join(languagesPath, language, `${namespace}.json`);
            ‚ãÆ‚îÜ----------------------------------------
           59‚îÜ const configPath = path.join(languagesPath, folder, 'language.json');
                                
  [36m[22m[24m  src/logger.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           80‚îÜ stream = fs.createWriteStream(path.join(value, 'nodebb.log'), { flags: 'a' });
                                  
  [36m[22m[24m  src/meta/css.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          160‚îÜ const exists = await file.exists(path.join(__dirname, '../../node_modules', filepath));
            ‚ãÆ‚îÜ----------------------------------------
          180‚îÜ const newFile = path.join(parsed.dir, parsed.name);
            ‚ãÆ‚îÜ----------------------------------------
          180‚îÜ const newFile = path.join(parsed.dir, parsed.name);
            ‚ãÆ‚îÜ----------------------------------------
          336‚îÜ await Promise.all(files.map(f => fs.promises.unlink(path.join(__dirname,
               '../../build/public', f))));                                            
            ‚ãÆ‚îÜ----------------------------------------
          344‚îÜ fs.promises.writeFile(path.join(__dirname, '../../build/public', `${target}.css`),
               ltr.code),                                                                        
            ‚ãÆ‚îÜ----------------------------------------
          345‚îÜ fs.promises.writeFile(path.join(__dirname, '../../build/public', `${target}-rtl.css`),
               rtl.code),                                                                            
                                           
  [36m[22m[24m  src/meta/dependencies.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           34‚îÜ let pkgData = await fs.promises.readFile(path.join(paths.nodeModules, moduleName,
               'package.json'), 'utf8');                                                        
                                 
  [36m[22m[24m  src/meta/js.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           37‚îÜ const srcPath = path.join(__dirname, '../../', modules[relPath]);
            ‚ãÆ‚îÜ----------------------------------------
           38‚îÜ const destPath = path.join(__dirname, '../../build/public/src/modules', relPath);
            ‚ãÆ‚îÜ----------------------------------------
           65‚îÜ p => path.join(__dirname, '../../build/public/src', p)
            ‚ãÆ‚îÜ----------------------------------------
           92‚îÜ const destDir = path.join(__dirname, '../../build/public/plugins', mappedPath);
            ‚ãÆ‚îÜ----------------------------------------
          133‚îÜ const filePath = path.join(__dirname, '../../build/public', filename);
                                        
  [36m[22m[24m  src/meta/languages.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           59‚îÜ const filePath = path.join(buildLanguagesPath, language, `${namespace}.json`);
            ‚ãÆ‚îÜ----------------------------------------
           59‚îÜ const filePath = path.join(buildLanguagesPath, language, `${namespace}.json`);
            ‚ãÆ‚îÜ----------------------------------------
           87‚îÜ await assignFileToTranslations(translations, path.join(coreLanguagesPath, lang,
               `${namespace}.json`));                                                         
            ‚ãÆ‚îÜ----------------------------------------
           87‚îÜ await assignFileToTranslations(translations, path.join(coreLanguagesPath, lang,
               `${namespace}.json`));                                                         
            ‚ãÆ‚îÜ----------------------------------------
          102‚îÜ const pathToPluginLanguageFolder = path.join(paths.nodeModules, pluginData.id,
               pluginData.languages);                                                        
            ‚ãÆ‚îÜ----------------------------------------
          102‚îÜ const pathToPluginLanguageFolder = path.join(paths.nodeModules, pluginData.id,
               pluginData.languages);                                                        
            ‚ãÆ‚îÜ----------------------------------------
          119‚îÜ await assignFileToTranslations(translations, path.join(pathToPluginLanguageFolder,
               language, `${namespace}.json`));                                                  
            ‚ãÆ‚îÜ----------------------------------------
          119‚îÜ await assignFileToTranslations(translations, path.join(pathToPluginLanguageFolder,
               language, `${namespace}.json`));                                                  
            ‚ãÆ‚îÜ----------------------------------------
          119‚îÜ await assignFileToTranslations(translations, path.join(pathToPluginLanguageFolder,
               language, `${namespace}.json`));                                                  
   
    ‚ùØ‚ù± javascript.lang.security.insecure-object-assign.insecure-object-assign
          Depending on the context, user control data in `Object.assign` can cause web response to include
          data that it should not have or can lead to a mass assignment vulnerability.                    
          Details: https://sg.run/2R0D                                                                    
                                                                                                          
          126‚îÜ Object.assign(translations, JSON.parse(fileData));
                                        
  [36m[22m[24m  src/meta/templates.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           51‚îÜ return path.join(paths.nodeModules, id, plugins.pluginsData[id].templates || 'templates');
            ‚ãÆ‚îÜ----------------------------------------
           51‚îÜ return path.join(paths.nodeModules, id, plugins.pluginsData[id].templates || 'templates');
            ‚ãÆ‚îÜ----------------------------------------
          123‚îÜ await mkdirp(path.join(viewsPath, path.dirname(name)));
            ‚ãÆ‚îÜ----------------------------------------
          130‚îÜ await fs.promises.writeFile(path.join(viewsPath, name), imported);
                                     
  [36m[22m[24m  src/meta/themes.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           27‚îÜ const config = path.join(themePath, theme, 'theme.json');
            ‚ãÆ‚îÜ----------------------------------------
           28‚îÜ const pack = path.join(themePath, theme, 'package.json');
            ‚ãÆ‚îÜ----------------------------------------
           66‚îÜ const dirpath = path.join(themePath, dir);
            ‚ãÆ‚îÜ----------------------------------------
           66‚îÜ const dirpath = path.join(themePath, dir);
            ‚ãÆ‚îÜ----------------------------------------
           76‚îÜ const themes = await getThemes(path.join(themePath, dir));
            ‚ãÆ‚îÜ----------------------------------------
           76‚îÜ const themes = await getThemes(path.join(themePath, dir));
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ return themes.map(theme => path.join(dir, theme));
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ return themes.map(theme => path.join(dir, theme));
            ‚ãÆ‚îÜ----------------------------------------
           97‚îÜ const pathToThemeJson = path.join(nconf.get('themes_path'), data.id, 'theme.json');
            ‚ãÆ‚îÜ----------------------------------------
          171‚îÜ const fallback = path.join(nconf.get('themes_path'), themeObj.id, 'templates');
            ‚ãÆ‚îÜ----------------------------------------
          174‚îÜ themePath = path.join(nconf.get('themes_path'), themeObj.id, themeObj.templates);
            ‚ãÆ‚îÜ----------------------------------------
          174‚îÜ themePath = path.join(nconf.get('themes_path'), themeObj.id, themeObj.templates);
            ‚ãÆ‚îÜ----------------------------------------
          183‚îÜ nconf.set('theme_config', path.join(nconf.get('themes_path'), themeObj.id, 'theme.json'));
                                           
  [36m[22m[24m  src/middleware/assert.js[0m
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           87‚îÜ const pathToFile = path.join(nconf.get('upload_path'), req.body.path);
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           87‚îÜ const pathToFile = path.join(nconf.get('upload_path'), req.body.path);
            ‚ãÆ‚îÜ----------------------------------------
          104‚îÜ const folderPath = path.join(res.locals.cleanedPath, folderName);
   
    ‚ùØ‚ù± javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
          104‚îÜ const folderPath = path.join(res.locals.cleanedPath, folderName);
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          104‚îÜ const folderPath = path.join(res.locals.cleanedPath, folderName);
                                            
  [36m[22m[24m  src/middleware/headers.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `origin` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           44‚îÜ origin = new RegExp(origin.trim());
                                         
  [36m[22m[24m  src/middleware/user.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `req` function argument, this might allow an attacker to cause a Regular     
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          265‚îÜ const newPath = req.path.replace(new RegExp(`/${req.params.userslug}`), () =>
               `/${lowercaseSlug}`);                                                        
                                      
  [36m[22m[24m  src/plugins/data.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           29‚îÜ .map(plugin => path.join(paths.nodeModules, plugin));
            ‚ãÆ‚îÜ----------------------------------------
           41‚îÜ fs.promises.readFile(path.join(pluginPath, 'package.json'), 'utf8'),
            ‚ãÆ‚îÜ----------------------------------------
           42‚îÜ fs.promises.readFile(path.join(pluginPath, 'plugin.json'), 'utf8'),
            ‚ãÆ‚îÜ----------------------------------------
          146‚îÜ return pluginData[type].map(file => path.join(pluginData.id, file));
            ‚ãÆ‚îÜ----------------------------------------
          146‚îÜ return pluginData[type].map(file => path.join(pluginData.id, file));
            ‚ãÆ‚îÜ----------------------------------------
          156‚îÜ const currentPath = path.join(basePath, modulePath);
            ‚ãÆ‚îÜ----------------------------------------
          156‚îÜ const currentPath = path.join(basePath, modulePath);
   
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `pluginData` function argument, this might allow an attacker to cause a      
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          213‚îÜ key = modulePath.replace(new RegExp(`.?(/[^/]+){${strip}}/`), '');
   
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          243‚îÜ const pathToFolder = path.join(paths.nodeModules, pluginData.id, pluginData.languages);
            ‚ãÆ‚îÜ----------------------------------------
          243‚îÜ const pathToFolder = path.join(paths.nodeModules, pluginData.id, pluginData.languages);
                                       
  [36m[22m[24m  src/plugins/index.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          265‚îÜ pluginPaths = pluginPaths.map(dir => path.join(Plugins.nodeModulesPath, dir));
            ‚ãÆ‚îÜ----------------------------------------
          288‚îÜ const dirPath = path.join(Plugins.nodeModulesPath, dirname);
            ‚ãÆ‚îÜ----------------------------------------
          305‚îÜ const subdirPath = path.join(dirPath, subdir);
            ‚ãÆ‚îÜ----------------------------------------
          305‚îÜ const subdirPath = path.join(dirPath, subdir);
                                         
  [36m[22m[24m  src/plugins/install.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          150‚îÜ const pluginDir = path.join(paths.nodeModules, id);
                                       
  [36m[22m[24m  src/posts/uploads.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           27‚îÜ const _getFullPath = relativePath => path.join(pathPrefix, relativePath);
                                      
  [36m[22m[24m  src/routes/index.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
          RegExp() called with a `mount` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          215‚îÜ router.use(new RegExp(`/(api/)?${original}`), (req, res) => {
                                  
  [36m[22m[24m  src/settings.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
          139‚îÜ obj = obj[part];
            ‚ãÆ‚îÜ----------------------------------------
          148‚îÜ def = def[part];
            ‚ãÆ‚îÜ----------------------------------------
          205‚îÜ obj = obj[part];
                                       
  [36m[22m[24m  src/topics/thumbs.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          122‚îÜ const absolutePaths = relativePaths.map(relativePath => path.join(nconf.get('upload_path'),
               relativePath));                                                                            
                                 
  [36m[22m[24m  src/upgrade.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           66‚îÜ const configPath = path.join(paths.nodeModules, plugin, 'plugin.json');
            ‚ãÆ‚îÜ----------------------------------------
           71‚îÜ files.push(path.join(path.dirname(configPath), script));
            ‚ãÆ‚îÜ----------------------------------------
           71‚îÜ files.push(path.join(path.dirname(configPath), script));
                                                                                  
  [36m[22m[24m  src/upgrades/1.19.2/remove_leftover_thumbs_after_topic_purge.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           35‚îÜ const absolutePaths = relativePaths.map(relativePath => path.join(nconf.get('upload_path'),
               relativePath));                                                                            
                                                                
  [36m[22m[24m  src/upgrades/1.7.6/flatten_navigation_data.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           16‚îÜ navItem = navItem[keys[0]];
                                                            
  [36m[22m[24m  src/upgrades/3.8.0/user-upload-folders.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           32‚îÜ await mkdirp(path.join(folder, `uid-${uid}`));
            ‚ãÆ‚îÜ----------------------------------------
           34‚îÜ path.join(folder, file),
            ‚ãÆ‚îÜ----------------------------------------
           35‚îÜ path.join(folder, `uid-${uid}`, file),
            ‚ãÆ‚îÜ----------------------------------------
           35‚îÜ path.join(folder, `uid-${uid}`, file),
                                     
  [36m[22m[24m  src/user/delete.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          234‚îÜ const folder = path.join(nconf.get('upload_path'), 'profile', `uid-${uid}`);
                                                
  [36m[22m[24m  src/user/jobs/export-posts.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           30‚îÜ const filePath = path.join(__dirname, '../../../build/export', `${targetUid}_posts.csv`);
                                                  
  [36m[22m[24m  src/user/jobs/export-profile.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           33‚îÜ const profilePath = path.join(__dirname, '../../../build/export', profileFile);
                                                  
  [36m[22m[24m  src/user/jobs/export-uploads.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           31‚îÜ const archivePath = path.join(__dirname, '../../../build/export',
               `${targetUid}_uploads.zip`);                                     
            ‚ãÆ‚îÜ----------------------------------------
           77‚îÜ const profileUploadPath = path.join(nconf.get('upload_path'), `profile/uid-${targetUid}`);
                                      
  [36m[22m[24m  src/user/picture.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          231‚îÜ return path.join(nconf.get('upload_path'), `profile/uid-${uid}`, filename);
            ‚ãÆ‚îÜ----------------------------------------
          231‚îÜ return path.join(nconf.get('upload_path'), `profile/uid-${uid}`, filename);
                                      
  [36m[22m[24m  src/user/uploads.js[0m
    ‚ùØ‚ù± javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
           14‚îÜ const _getFullPath = relativePath => path.resolve(nconf.get('upload_path'), relativePath);
                                   
  [36m[22m[24m  src/webserver.js[0m
     ‚ù± javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
          A CSRF middleware was not detected in your express application. Ensure you are either using one such
          as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your    
          routes with a token or cookies.                                                                     
          Details: https://sg.run/BxzR                                                                        
                                                                                                              
           11‚îÜ const app = express();
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
          Don‚Äôt use the default session cookie name Using the default session cookie name can open your app to
          attacks. The security issue posed is similar to X-Powered-By: a potential attacker can use it to    
          fingerprint the server and target attacks accordingly.                                              
          Details: https://sg.run/1Z5x                                                                        
                                                                                                              
          167‚îÜ app.use(session({
          168‚îÜ    store: db.sessionStore,
          169‚îÜ    secret: nconf.get('secret'),
          170‚îÜ    key: nconf.get('sessionKey'),
          171‚îÜ    cookie: setupCookie(),
          172‚îÜ    resave: nconf.get('sessionResave') || false,
          173‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          174‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
          Default session middleware settings: `domain` not set. It indicates the domain of the cookie; use it
          to compare against the domain of the server in which the URL is being requested. If they match, then
          check the path attribute next.                                                                      
          Details: https://sg.run/rd41                                                                        
                                                                                                              
          167‚îÜ app.use(session({
          168‚îÜ    store: db.sessionStore,
          169‚îÜ    secret: nconf.get('secret'),
          170‚îÜ    key: nconf.get('sessionKey'),
          171‚îÜ    cookie: setupCookie(),
          172‚îÜ    resave: nconf.get('sessionResave') || false,
          173‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          174‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
          Default session middleware settings: `expires` not set. Use it to set expiration date for persistent
          cookies.                                                                                            
          Details: https://sg.run/N4eG                                                                        
                                                                                                              
          167‚îÜ app.use(session({
          168‚îÜ    store: db.sessionStore,
          169‚îÜ    secret: nconf.get('secret'),
          170‚îÜ    key: nconf.get('sessionKey'),
          171‚îÜ    cookie: setupCookie(),
          172‚îÜ    resave: nconf.get('sessionResave') || false,
          173‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          174‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
          Default session middleware settings: `httpOnly` not set. It ensures the cookie is sent only over
          HTTP(S), not client JavaScript, helping to protect against cross-site scripting attacks.        
          Details: https://sg.run/ydBO                                                                    
                                                                                                          
          167‚îÜ app.use(session({
          168‚îÜ    store: db.sessionStore,
          169‚îÜ    secret: nconf.get('secret'),
          170‚îÜ    key: nconf.get('sessionKey'),
          171‚îÜ    cookie: setupCookie(),
          172‚îÜ    resave: nconf.get('sessionResave') || false,
          173‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          174‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
          Default session middleware settings: `path` not set. It indicates the path of the cookie; use it to
          compare against the request path. If this and domain match, then send the cookie in the request.   
          Details: https://sg.run/b7pd                                                                       
                                                                                                             
          167‚îÜ app.use(session({
          168‚îÜ    store: db.sessionStore,
          169‚îÜ    secret: nconf.get('secret'),
          170‚îÜ    key: nconf.get('sessionKey'),
          171‚îÜ    cookie: setupCookie(),
          172‚îÜ    resave: nconf.get('sessionResave') || false,
          173‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          174‚îÜ }));
   
    ‚ùØ‚ù± javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
          Default session middleware settings: `secure` not set. It ensures the browser only sends the cookie
          over HTTPS.                                                                                        
          Details: https://sg.run/9oKz                                                                       
                                                                                                             
          167‚îÜ app.use(session({
          168‚îÜ    store: db.sessionStore,
          169‚îÜ    secret: nconf.get('secret'),
          170‚îÜ    key: nconf.get('sessionKey'),
          171‚îÜ    cookie: setupCookie(),
          172‚îÜ    resave: nconf.get('sessionResave') || false,
          173‚îÜ    saveUninitialized: nconf.get('sessionSaveUninitialized') || false,
          174‚îÜ }));

